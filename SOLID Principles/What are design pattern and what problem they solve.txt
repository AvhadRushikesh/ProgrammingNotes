Question - What are Design Pattern and What problem they solve?


Design patterns are reusable solutions to common problems encountered in software design and development.
They represent best practices and guidelines for solving certain types of problems that developers often face.
These patterns capture expert knowledge and experience and provide a way to create software that is more modular, maintainable, and scalable.
Design patterns are not blueprints or templates but rather general guidelines that can be adapted to specific situations.

Some of the common design patterns include:
Singleton Pattern:
    Problem: Ensuring that a class has only one instance and providing a global point of access to it.
    Use Case: When exactly one object is needed to coordinate actions across the system.
Factory Method Pattern:
    Problem: Deferring the instantiation of an object to its subclasses.
    Use Case: When a class cannot anticipate the class of objects it must create.
Observer Pattern:
    Problem: Defining a one-to-many dependency between objects so that when one object changes state,
    all its dependents are notified and updated automatically.
    Use Case: When an object (the subject) needs to notify other objects (observers) about changes without knowing
    who or what those observers are.
Decorator Pattern:
    Problem: Attaching additional responsibilities to an object dynamically.
    Use Case: When you need to add or alter behavior of objects at runtime without modifying their code.
Strategy Pattern:
    Problem: Defining a family of algorithms, encapsulating each one, and making them interchangeable.
    Use Case: When you want to allow a client to choose from a family of algorithms at runtime.

These design patterns help address common issues in software design such as coupling, flexibility, and extensibility.
By adopting these patterns, developers can create more maintainable and scalable code, 
reduce redundancy, and make their software systems more adaptable to changes over time.