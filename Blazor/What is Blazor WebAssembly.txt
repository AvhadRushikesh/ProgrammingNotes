Question - What is Blazor WebAssembly?


Blazor WebAssembly is a single-page app (SPA) framework for building browser-based web apps with .NET.
The magic that runs a C#/.NET app inside a web browser is called WebAssembly (wasm).
Blazor WebAssembly is based on open web standards and works in all modern browsers without the need for any plugin or complication. 
Blazor WebAssembly runs .NET code in the browser with WebAssembly.
WebAssembly uses JS Interop to generate and interact with JavaScript in the browser. 
Technically, WebAssembly is a low-level assembly language runtime with a compact binary format that provides a way
to run the code written in different high-level languages in the browser at the same speed as native.
 
Official definition of WebAssembly
    WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine.
    Wasm is designed as a portable compilation target for programming languages,
    enabling deployment on the web for client and server applications.
    WebAssembly is efficient and fast, safe, open and debuggable, and part of an open web platform.

Efficient and fast 
    The Wasm stack machine is designed to be encoded in a size- and load-time-efficient binary format.
    WebAssembly aims to execute at native speed by taking advantage of common hardware capabilities available on a wide range of platforms..
Safe 
    WebAssembly describes a memory-safe, sandboxed execution environment that may even be implemented inside existing JavaScript virtual machines.
    When embedded in the web, WebAssembly will enforce the same-origin and permissions security policies of the browser.
Open and debuggable
    WebAssembly is designed to be pretty-printed in a textual format for debugging, testing, experimenting, optimizing, learning,
    teaching, and writing programs by hand.
    The textual format will be used when viewing the source of Wasm modules on the web.
Part of the open web platform
    WebAssembly is designed to maintain the version less, feature-tested, and backward-compatible nature of the web.
    WebAssembly modules will be able to call into and out of the JavaScript context and access browser functionality through
    the same Web APIs accessible from JavaScript.
    WebAssembly also supports non-web embeddings.