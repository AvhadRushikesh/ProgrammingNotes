Question - What is the difference between List and Dictionary Collections?

List and Dictionary are both collection types in C# that serve different purposes and have different use cases.

List<T>
A List is a dynamic array that stores elements of a specific type in a sequential order. 
It allows you to add, remove, and access elements based on their index.

Declaration:
List<T> myList = new List<T>();

Example:
List<string> stringList = new List<string>();
stringList.Add("Apple");
stringList.Add("Banana");
stringList.Add("Orange");
Accessing Elements:

csharpCopycode
string secondElement = stringList[1]; // Accessing the second element (index is zero-based)

Use Case: 
    Use a List when you need a collection of items in a specific order and you may need to perform operations like adding, removing, or accessing elements by index.



Dictionary<TKey, TValue>
    A Dictionary is a collection of key-value pairs, where each key must be unique. 
    It allows you to associate values with keys and quickly look up values based on their associated keys.

Declaration:
Dictionary<TKey, TValue> myDictionary = new Dictionary<TKey, TValue>();


Example:
Dictionary<string, int> ageDictionary = new Dictionary<string, int>();
ageDictionary["Alice"] = 25;
ageDictionary["Bob"] = 30;


Accessing Elements:
int bobAge = ageDictionary["Bob"]; // Accessing the value associated with the key "Bob"

Use Case:
    Use a Dictionary when you need to store and retrieve values based on a unique key. 
    It's particularly useful when you have a set of data that you want to access quickly using a specific identifier.

Summary of Differences:
List: 
    Maintains the order of elements based on their index.
    Allows duplicate elements.
    Elements are accessed by index.
    Use when you need a dynamic array of elements with a specific order and may need to perform operations like 
    adding, removing, or accessing elements by index.

Dictionary:
    Does not guarantee any specific order; items are accessed by their keys.
    Requires keys to be unique; values can be duplicated.
    Elements are accessed by key.
    Use when you need to associate values with unique keys and quickly look up values based on those keys.


