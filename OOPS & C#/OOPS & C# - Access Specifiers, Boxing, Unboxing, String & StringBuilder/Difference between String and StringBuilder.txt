Question - What is difference between String and StringBuilder?

In C#, both String and StringBuilder are classes that deal with string data

1. String:
1.1 Immutable: 
    Strings in C# are immutable, meaning that their values cannot be changed after they are created. 
    Any operation that appears to modify a string actually creates a new string.
1.2 Memory Allocation: 
    String operations, such as concatenation or substring creation, result in the creation of new strings. 
    This can lead to additional memory allocations, especially in scenarios where many operations are performed.
1.3 Performance Implications: 
    In scenarios where a large number of string operations are performed, the creation of new string objects can impact performance and memory usage.
1.4 Usage: 
    Strings are suitable for scenarios where the content is mostly fixed and does not change frequently.

2. StringBuilder:
2.1 Mutable: 
    StringBuilder is mutable, meaning that you can modify its content without creating new objects. 
    This is achieved through methods that modify the existing StringBuilder instance.
2.2 Memory Allocation:
    StringBuilder is designed to minimize memory allocations by providing a resizable buffer that can be reused for modifications. 
    This can lead to better performance in scenarios with frequent modifications.
2.3 Performance Advantages:
    StringBuilder is more efficient than string concatenation when dealing with a large number of modifications, as it avoids the creation of new objects.
2.4 Usage:
    StringBuilder is suitable for scenarios where the content of a string is frequently modified, such as building strings dynamically in loops.
